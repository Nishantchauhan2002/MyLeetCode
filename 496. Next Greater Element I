//in this approach we are using hashmap and what we are doing is we are finding the nextgreater element in the nums2 array
//and then we are store that nextgreater array in a hashmap with nums2[i] element and the element that is greater than that 
//element that means ans[i]
//after storing the element in the map then we are checking the elements from nums1[i] which element is greater than that 
element from the hashmap because we have stored them in a manner 

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer>st = new Stack<>();
        int ans[]= new int[nums2.length];
        for(int i=nums2.length-1;i>=0;i--){
            int ele = nums2[i];

            while(!st.isEmpty() && st.peek()<=ele){
                st.pop();
            }
            if(st.isEmpty()){
                ans[i] = -1;
            }
            else{
                ans[i] = st.peek();
            }

            st.push(ele);
        }

        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums2.length;i++){
            map.put(nums2[i],ans[i]);
        }

        int result[]=new int[nums1.length];
        for(int i=0;i<result.length;i++){
            result[i] = map.get(nums1[i]);
        }
        return result;

    }
}


//this solution is based on the index of the number 
//means we are storing the index of every element in an array and then we are traversing in the 
//forward direction from that index to find the element's next greater element 


class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int index[]=new int[10001];
        for(int i=0;i<nums2.length;i++){
            index[nums2[i]] = i;
        }
        for(int i=0;i<nums1.length;i++){
            nums1[i] = findTheNextUsingIndex(index[nums1[i]],nums2);
        }
        return nums1;
    }
    public int findTheNextUsingIndex(int index,int nums2[]){
        for(int i=index+1;i<nums2.length;i++){
            if(nums2[index]<nums2[i]){
                return nums2[i];
            }
        }
        return -1;
    }

}



