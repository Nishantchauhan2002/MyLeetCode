//this soln is wriiten using the hashset and easy to think but not the best 

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
         List<List<Integer>> ans = new ArrayList<>();
         HashSet<List<Integer>>set = new HashSet<>();
         List<Integer> res = new ArrayList<>();
         sol(nums,res,set,0);
         for(List<Integer>list:set){
            ans.add(new ArrayList<>(list));
         }
         return ans;
         
    }
    public void sol(int nums[],List<Integer> res,HashSet<List<Integer>>set,int idx){
        if(idx == nums.length){
            set.add(new ArrayList<>(res));
            return ;
        }
        res.add(nums[idx]);
        sol(nums,res,set,idx+1);
        res.remove(res.size()-1);
        sol(nums,res,set,idx+1);
    }
}

//Another soln using a for loop whether checking that the previous number is same to thee next or not 

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
       List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums); // Sort candidates to handle duplicates
        sol(ans, new ArrayList<Integer>(),nums,0);
        return ans;   
    }
    
    void sol(List<List<Integer>> ans, List<Integer> temp, int[] nums,int index) {
        ans.add(new ArrayList<>(temp));  
        for (int i = index; i < nums.length; i++) {
            if (i > index && nums[i] == nums[i - 1]) continue; // Skip duplicates
            temp.add(nums[i]);
            sol(ans, temp, nums,i + 1); // Move to the next index
            temp.remove(temp.size() - 1);
        }
    }
}